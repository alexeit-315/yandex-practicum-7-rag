#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ RAG-–±–æ—Ç–∞
"""

import argparse
import sys
from rag_pipeline import RAGPipeline
from tqdm import tqdm  # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

def parse_args():
    parser = argparse.ArgumentParser(description="RAG-–±–æ—Ç —Å –ª–æ–∫–∞–ª—å–Ω–æ–π LLM")
    parser.add_argument("--debug", action="store_true", help="–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ (–ø–µ—á–∞—Ç—å –ø—Ä–æ–º–ø—Ç–æ–≤ –∏ —á–∞–Ω–∫–æ–≤)")
    parser.add_argument("--no-protection", action="store_true", help="–û—Ç–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö —á–∞–Ω–∫–æ–≤")
    parser.add_argument("--query", type=str, help="–ó–∞–¥–∞—Ç—å –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
    parser.add_argument("--file", type=str, help="–§–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ)")
    return parser.parse_args()

def process_batch_file(rag: RAGPipeline, file_path: str):
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            questions = [line.strip() for line in f if line.strip()]

        print(f"\nüìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: {file_path}\n")

        for idx, question in enumerate(tqdm(questions, desc="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", unit="–≤–æ–ø—Ä–æ—Å"), 1):
            print(f"\nüìå –í–æ–ø—Ä–æ—Å {idx}: {question}")
            response = rag.process_query(question)
            print("ü§ñ –û—Ç–≤–µ—Ç:")
            print(response)
            print("------------------------------------------------------------")

    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

def main():
    args = parse_args()

    rag = RAGPipeline()

    rag.debug = args.debug
    rag.protection_enabled = not args.no_protection

    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    if args.file:
        process_batch_file(rag, args.file)
        return

    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–¥–∏–Ω–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    if args.query:
        print("\nüéØ –í–æ–ø—Ä–æ—Å:", args.query)
        response = rag.process_query(args.query)
        print("\nü§ñ –û—Ç–≤–µ—Ç:")
        print(response)
        return

    # –†–µ–∂–∏–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
    print("\n============================================================")
    print("ü§ñ –õ–æ–∫–∞–ª—å–Ω—ã–π RAG –ë–û–¢ (LLM + –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫)")
    print("============================================================")
    print("–î–ª—è –≤—ã—Ö–æ–¥–∞: 'quit', 'exit' –∏–ª–∏ Ctrl+C")
    print("------------------------------------------------------------")

    while True:
        try:
            query = input("\nüéØ –í–∞—à –≤–æ–ø—Ä–æ—Å: ").strip()
            if query.lower() in ["quit", "exit"]:
                print("üëã –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
                break

            response = rag.process_query(query)
            print("\n============================================================")
            print("ü§ñ –û–¢–í–ï–¢:")
            print(response.strip())
            print("============================================================")

        except KeyboardInterrupt:
            print("\nüëã –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
            break
        except Exception as e:
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
